/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AlertService } from "../alert.service";
import { AlertCreateInput } from "./AlertCreateInput";
import { Alert } from "./Alert";
import { AlertFindManyArgs } from "./AlertFindManyArgs";
import { AlertWhereUniqueInput } from "./AlertWhereUniqueInput";
import { AlertUpdateInput } from "./AlertUpdateInput";

export class AlertControllerBase {
  constructor(protected readonly service: AlertService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Alert })
  async createAlert(@common.Body() data: AlertCreateInput): Promise<Alert> {
    return await this.service.createAlert({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        triggerValue: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Alert] })
  @ApiNestedQuery(AlertFindManyArgs)
  async alerts(@common.Req() request: Request): Promise<Alert[]> {
    const args = plainToClass(AlertFindManyArgs, request.query);
    return this.service.alerts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        triggerValue: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Alert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async alert(
    @common.Param() params: AlertWhereUniqueInput
  ): Promise<Alert | null> {
    const result = await this.service.alert({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        triggerValue: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Alert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAlert(
    @common.Param() params: AlertWhereUniqueInput,
    @common.Body() data: AlertUpdateInput
  ): Promise<Alert | null> {
    try {
      return await this.service.updateAlert({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timestamp: true,
          triggerValue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Alert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAlert(
    @common.Param() params: AlertWhereUniqueInput
  ): Promise<Alert | null> {
    try {
      return await this.service.deleteAlert({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timestamp: true,
          triggerValue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/send-alert")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendAlert(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendAlert(body);
  }
}
