/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Alert as PrismaAlert } from "@prisma/client";

export class AlertServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AlertCountArgs, "select">): Promise<number> {
    return this.prisma.alert.count(args);
  }

  async alerts<T extends Prisma.AlertFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlertFindManyArgs>
  ): Promise<PrismaAlert[]> {
    return this.prisma.alert.findMany<Prisma.AlertFindManyArgs>(args);
  }
  async alert<T extends Prisma.AlertFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlertFindUniqueArgs>
  ): Promise<PrismaAlert | null> {
    return this.prisma.alert.findUnique(args);
  }
  async createAlert<T extends Prisma.AlertCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlertCreateArgs>
  ): Promise<PrismaAlert> {
    return this.prisma.alert.create<T>(args);
  }
  async updateAlert<T extends Prisma.AlertUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlertUpdateArgs>
  ): Promise<PrismaAlert> {
    return this.prisma.alert.update<T>(args);
  }
  async deleteAlert<T extends Prisma.AlertDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlertDeleteArgs>
  ): Promise<PrismaAlert> {
    return this.prisma.alert.delete(args);
  }
  async SendAlert(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
