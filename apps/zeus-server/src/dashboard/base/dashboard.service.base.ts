/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dashboard as PrismaDashboard } from "@prisma/client";

export class DashboardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DashboardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dashboard.count(args);
  }

  async dashboards<T extends Prisma.DashboardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardFindManyArgs>
  ): Promise<PrismaDashboard[]> {
    return this.prisma.dashboard.findMany<Prisma.DashboardFindManyArgs>(args);
  }
  async dashboard<T extends Prisma.DashboardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardFindUniqueArgs>
  ): Promise<PrismaDashboard | null> {
    return this.prisma.dashboard.findUnique(args);
  }
  async createDashboard<T extends Prisma.DashboardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardCreateArgs>
  ): Promise<PrismaDashboard> {
    return this.prisma.dashboard.create<T>(args);
  }
  async updateDashboard<T extends Prisma.DashboardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardUpdateArgs>
  ): Promise<PrismaDashboard> {
    return this.prisma.dashboard.update<T>(args);
  }
  async deleteDashboard<T extends Prisma.DashboardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardDeleteArgs>
  ): Promise<PrismaDashboard> {
    return this.prisma.dashboard.delete(args);
  }
}
