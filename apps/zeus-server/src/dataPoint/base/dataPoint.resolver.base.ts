/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataPoint } from "./DataPoint";
import { DataPointCountArgs } from "./DataPointCountArgs";
import { DataPointFindManyArgs } from "./DataPointFindManyArgs";
import { DataPointFindUniqueArgs } from "./DataPointFindUniqueArgs";
import { CreateDataPointArgs } from "./CreateDataPointArgs";
import { UpdateDataPointArgs } from "./UpdateDataPointArgs";
import { DeleteDataPointArgs } from "./DeleteDataPointArgs";
import { DataPointService } from "../dataPoint.service";
@graphql.Resolver(() => DataPoint)
export class DataPointResolverBase {
  constructor(protected readonly service: DataPointService) {}

  async _dataPointsMeta(
    @graphql.Args() args: DataPointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataPoint])
  async dataPoints(
    @graphql.Args() args: DataPointFindManyArgs
  ): Promise<DataPoint[]> {
    return this.service.dataPoints(args);
  }

  @graphql.Query(() => DataPoint, { nullable: true })
  async dataPoint(
    @graphql.Args() args: DataPointFindUniqueArgs
  ): Promise<DataPoint | null> {
    const result = await this.service.dataPoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataPoint)
  async createDataPoint(
    @graphql.Args() args: CreateDataPointArgs
  ): Promise<DataPoint> {
    return await this.service.createDataPoint({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DataPoint)
  async updateDataPoint(
    @graphql.Args() args: UpdateDataPointArgs
  ): Promise<DataPoint | null> {
    try {
      return await this.service.updateDataPoint({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataPoint)
  async deleteDataPoint(
    @graphql.Args() args: DeleteDataPointArgs
  ): Promise<DataPoint | null> {
    try {
      return await this.service.deleteDataPoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
