/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DataPoint as PrismaDataPoint } from "@prisma/client";

export class DataPointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataPointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataPoint.count(args);
  }

  async dataPoints<T extends Prisma.DataPointFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataPointFindManyArgs>
  ): Promise<PrismaDataPoint[]> {
    return this.prisma.dataPoint.findMany<Prisma.DataPointFindManyArgs>(args);
  }
  async dataPoint<T extends Prisma.DataPointFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataPointFindUniqueArgs>
  ): Promise<PrismaDataPoint | null> {
    return this.prisma.dataPoint.findUnique(args);
  }
  async createDataPoint<T extends Prisma.DataPointCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataPointCreateArgs>
  ): Promise<PrismaDataPoint> {
    return this.prisma.dataPoint.create<T>(args);
  }
  async updateDataPoint<T extends Prisma.DataPointUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataPointUpdateArgs>
  ): Promise<PrismaDataPoint> {
    return this.prisma.dataPoint.update<T>(args);
  }
  async deleteDataPoint<T extends Prisma.DataPointDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataPointDeleteArgs>
  ): Promise<PrismaDataPoint> {
    return this.prisma.dataPoint.delete(args);
  }
}
