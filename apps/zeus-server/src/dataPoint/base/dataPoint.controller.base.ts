/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataPointService } from "../dataPoint.service";
import { DataPointCreateInput } from "./DataPointCreateInput";
import { DataPoint } from "./DataPoint";
import { DataPointFindManyArgs } from "./DataPointFindManyArgs";
import { DataPointWhereUniqueInput } from "./DataPointWhereUniqueInput";
import { DataPointUpdateInput } from "./DataPointUpdateInput";

export class DataPointControllerBase {
  constructor(protected readonly service: DataPointService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataPoint })
  async createDataPoint(
    @common.Body() data: DataPointCreateInput
  ): Promise<DataPoint> {
    return await this.service.createDataPoint({
      data: data,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataPoint] })
  @ApiNestedQuery(DataPointFindManyArgs)
  async dataPoints(@common.Req() request: Request): Promise<DataPoint[]> {
    const args = plainToClass(DataPointFindManyArgs, request.query);
    return this.service.dataPoints({
      ...args,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataPoint(
    @common.Param() params: DataPointWhereUniqueInput
  ): Promise<DataPoint | null> {
    const result = await this.service.dataPoint({
      where: params,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataPoint(
    @common.Param() params: DataPointWhereUniqueInput,
    @common.Body() data: DataPointUpdateInput
  ): Promise<DataPoint | null> {
    try {
      return await this.service.updateDataPoint({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          timestamp: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataPoint(
    @common.Param() params: DataPointWhereUniqueInput
  ): Promise<DataPoint | null> {
    try {
      return await this.service.deleteDataPoint({
        where: params,
        select: {
          createdAt: true,
          id: true,
          timestamp: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
